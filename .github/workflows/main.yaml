name: memverse

# Ensure consistent concurrency settings across workflows
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  extract-config:
    runs-on: ubuntu-latest
    outputs:
      flutter_version: ${{ steps.extract.outputs.flutter_version }}
      min_coverage: ${{ steps.extract.outputs.min_coverage }}
      coverage_excludes: ${{ steps.extract.outputs.coverage_excludes }}
    steps:
      - uses: actions/checkout@v4
      - id: extract
        name: Extract configuration values
        run: |
          # Extract FLUTTER_VERSION from project_config.sh
          FLUTTER_VERSION=$(grep "FLUTTER_VERSION=" scripts/project_config.sh | cut -d'=' -f2 | tr -d '"' | tr -d "'")
          # Extract MIN_COVERAGE from project_config.sh
          MIN_COVERAGE=$(grep "MIN_COVERAGE=" scripts/project_config.sh | cut -d'=' -f2)
          # Extract COVERAGE_EXCLUDES from project_config.sh
          COVERAGE_EXCLUDES=$(grep "COVERAGE_EXCLUDES=" scripts/project_config.sh | cut -d'"' -f2)
          # Output as integer (no quotes)
          echo "flutter_version=$FLUTTER_VERSION" >> $GITHUB_OUTPUT
          echo "min_coverage=$(echo $MIN_COVERAGE | tr -d '"' | tr -d "'")" >> $GITHUB_OUTPUT
          echo "coverage_excludes=$COVERAGE_EXCLUDES" >> $GITHUB_OUTPUT
          echo "Using flutter_version: $FLUTTER_VERSION, min_coverage: $(echo $MIN_COVERAGE | tr -d '"' | tr -d "'"), and coverage_excludes: $COVERAGE_EXCLUDES"

  build:
    needs: extract-config
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ needs.extract-config.outputs.flutter_version }}
          cache: true # Enable Flutter cache

      - name: Install dependencies
        run: flutter pub get

      - name: Fix generated localization files
        run: ./scripts/fix_generated_localizations.sh

      - name: Check formatting
        run: dart format --output=none --set-exit-if-changed . -l 100 # Match line length

      - name: Analyze project
        run: flutter analyze

      - name: Run unit and widget tests with coverage
        run: flutter test --coverage --min-coverage=${{ needs.extract-config.outputs.min_coverage }}

      - name: Generate coverage report
        run: |
          dart pub global activate lcov || true
          dart pub global activate remove_from_coverage || true
          echo "Raw Excludes: ${{ needs.extract-config.outputs.coverage_excludes }}"

          # Convert shell globs to regex patterns for remove_from_coverage
          REGEX_FLAGS=""
          for pattern in ${{ needs.extract-config.outputs.coverage_excludes }}; do
            case "$pattern" in
              'lib/l10n/**/*')       REGEX_FLAGS+=" -r '/lib/l10n/'" ;;        # Match directory
              '**/*.g.dart')         REGEX_FLAGS+=" -r '.g.dart$'" ;;          # Match suffix
              'lib/src/bootstrap.dart') REGEX_FLAGS+=" -r '/lib/src/bootstrap.dart$'" ;; # Match exact file
              'lib/src/app/view/app.dart') REGEX_FLAGS+=" -r '/lib/src/app/view/app.dart$'" ;; # Match exact file
              '**/generated/**/*')    REGEX_FLAGS+=" -r '/generated/'" ;;       # Match directory
              '**/*.freezed.dart')   REGEX_FLAGS+=" -r '.freezed.dart$'" ;;     # Match suffix
              '**/generated_plugin_registrant.dart') REGEX_FLAGS+=" -r 'generated_plugin_registrant.dart$'" ;; # Match exact file
              'lib/src/features/auth/presentation/auth_wrapper.dart') REGEX_FLAGS+=" -r '/lib/src/features/auth/presentation/auth_wrapper.dart$'" ;; # Match exact file
              'lib/src/features/auth/presentation/providers/auth_providers.dart') REGEX_FLAGS+=" -r '/lib/src/features/auth/presentation/providers/auth_providers.dart$'" ;; # Match exact file
              *) echo "Warning: Unhandled exclusion pattern '$pattern' in CI workflow build job" ;;
            esac
          done
          echo "Generated Regex Flags: $REGEX_FLAGS"

          # Use eval to correctly interpret the flags string
          if [ -f coverage/lcov.info ]; then
            eval remove_from_coverage -f coverage/lcov.info $REGEX_FLAGS
            echo "Unit/Widget Test Coverage Summary:"
            lcov --list coverage/lcov.info
            lcov --summary coverage/lcov.info
          else
            echo "coverage/lcov.info not found after running tests."
            exit 1 # Fail if coverage file is missing
          fi

      - name: Upload coverage to Codecov (Unit/Widget)
        uses: codecov/codecov-action@v5
        if: github.event_name == 'workflow_dispatch'
        continue-on-error: true # Don't fail pipeline if upload fails
        with:
          file: coverage/lcov.info
          flags: unit_widget_tests
          token: ${{ secrets.CODECOV_TOKEN }}

  integration-test:
    needs: extract-config
    name: Integration Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    steps:
      - uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ needs.extract-config.outputs.flutter_version }}

      - name: Install dependencies
        run: flutter pub get

      - name: Setup Android emulator
        uses: ReactiveCircus/android-emulator-runner@v2
        with:
          api-level: 29
          arch: x86_64
          profile: Nexus 6
          script: |
            flutter doctor -v
            flutter test integration_test --coverage

      - name: Process integration test coverage
        run: |
          # Convert shell globs to regex patterns for coverage exclusions
          REGEX_FLAGS=""
          for pattern in ${{ needs.extract-config.outputs.coverage_excludes }}; do
            case "$pattern" in
              'lib/l10n/**/*')       REGEX_FLAGS+=" -r '/lib/l10n/'" ;;        # Match directory
              '**/*.g.dart')         REGEX_FLAGS+=" -r '.g.dart$'" ;;          # Match suffix
              'lib/src/bootstrap.dart') REGEX_FLAGS+=" -r '/lib/src/bootstrap.dart$'" ;; # Match exact file
              'lib/src/app/view/app.dart') REGEX_FLAGS+=" -r '/lib/src/app/view/app.dart$'" ;; # Match exact file
              '**/generated/**/*')    REGEX_FLAGS+=" -r '/generated/'" ;;       # Match directory
              '**/*.freezed.dart')   REGEX_FLAGS+=" -r '.freezed.dart$'" ;;     # Match suffix
              '**/generated_plugin_registrant.dart') REGEX_FLAGS+=" -r 'generated_plugin_registrant.dart$'" ;; # Match exact file
              'lib/src/features/auth/presentation/auth_wrapper.dart') REGEX_FLAGS+=" -r '/lib/src/features/auth/presentation/auth_wrapper.dart$'" ;; # Match exact file
              'lib/src/features/auth/presentation/providers/auth_providers.dart') REGEX_FLAGS+=" -r '/lib/src/features/auth/presentation/providers/auth_providers.dart$'" ;; # Match exact file
              *) echo "Warning: Unhandled exclusion pattern '$pattern' in integration test job" ;;
            esac
          done
          echo "Generated Regex Flags: $REGEX_FLAGS"
          
          # Process coverage with the exclusions
          # Use remove_from_coverage for integration test coverage
          if [ -f coverage/lcov.info ]; then
            dart pub global activate remove_from_coverage || true
            eval "remove_from_coverage -f coverage/lcov.info $REGEX_FLAGS"
            lcov --summary coverage/lcov.info
            # Copy to the expected location
            cp coverage/lcov.info coverage/integration_lcov.info
            genhtml coverage/integration_lcov.info -o coverage/integration_html
          else
            echo "No coverage/lcov.info file found from integration tests"
            exit 1
          fi

          # Check if coverage meets minimum 70%
          COVERAGE_LINE=$(lcov --summary coverage/integration_lcov.info | grep "lines" | sed 's/.*lines.......: \([0-9.]*%\).*/\1/')
          COVERAGE_NUMBER=$(echo ${COVERAGE_LINE} | sed 's/%//')
          if (( $(echo "${COVERAGE_NUMBER} >= 70" | bc -l) )); then
            echo "Integration test coverage is acceptable: ${COVERAGE_LINE} (minimum: 70%)"
          else
            echo "Integration test coverage is below acceptable levels: ${COVERAGE_LINE} (minimum: 70%)"
            exit 1
          fi

      - name: Upload integration coverage report
        uses: actions/upload-artifact@v4
        if: github.event_name == 'workflow_dispatch'
        with:
          name: integration-test-coverage
          path: coverage/integration_html

  check-logging-standards:
    name: Check Logging Standards
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Check for prohibited logging methods
        run: |
          chmod +x ./scripts/check_logging_standards.py
          python3 ./scripts/check_logging_standards.py --mode ci

  spell-check:
    uses: VeryGoodOpenSource/very_good_workflows/.github/workflows/spell_check.yml@v1
    with:
      includes: |
        **/*.md
      modified_files_only: false
