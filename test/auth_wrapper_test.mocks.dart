// Mocks generated by Mockito 5.4.5 from annotations
// in memverse/test/auth_wrapper_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i2;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeFuture_0<T1> extends _i1.SmartFake implements _i2.Future<T1> {
  _FakeFuture_0(Object parent, Invocation parentInvocation) : super(parent, parentInvocation);
}

/// A class which mocks [Future].
///
/// See the documentation for Mockito's code generation for more information.
class MockFuture<T> extends _i1.Mock implements _i2.Future<T> {
  MockFuture() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Future<R> then<R>(_i2.FutureOr<R> Function(T)? onValue, {Function? onError}) =>
      (super.noSuchMethod(
            Invocation.method(#then, [onValue], {#onError: onError}),
            returnValue:
                _i3.ifNotNull(
                  _i3.dummyValueOrNull<R>(
                    this,
                    Invocation.method(#then, [onValue], {#onError: onError}),
                  ),
                  (R v) => _i2.Future<R>.value(v),
                ) ??
                _FakeFuture_0<R>(this, Invocation.method(#then, [onValue], {#onError: onError})),
          )
          as _i2.Future<R>);

  @override
  _i2.Future<T> catchError(Function? onError, {bool Function(Object)? test}) =>
      (super.noSuchMethod(
            Invocation.method(#catchError, [onError], {#test: test}),
            returnValue:
                _i3.ifNotNull(
                  _i3.dummyValueOrNull<T>(
                    this,
                    Invocation.method(#catchError, [onError], {#test: test}),
                  ),
                  (T v) => _i2.Future<T>.value(v),
                ) ??
                _FakeFuture_0<T>(this, Invocation.method(#catchError, [onError], {#test: test})),
          )
          as _i2.Future<T>);

  @override
  _i2.Future<T> whenComplete(_i2.FutureOr<void> Function()? action) =>
      (super.noSuchMethod(
            Invocation.method(#whenComplete, [action]),
            returnValue:
                _i3.ifNotNull(
                  _i3.dummyValueOrNull<T>(this, Invocation.method(#whenComplete, [action])),
                  (T v) => _i2.Future<T>.value(v),
                ) ??
                _FakeFuture_0<T>(this, Invocation.method(#whenComplete, [action])),
          )
          as _i2.Future<T>);

  @override
  _i2.Stream<T> asStream() =>
      (super.noSuchMethod(Invocation.method(#asStream, []), returnValue: _i2.Stream<T>.empty())
          as _i2.Stream<T>);

  @override
  _i2.Future<T> timeout(Duration? timeLimit, {_i2.FutureOr<T> Function()? onTimeout}) =>
      (super.noSuchMethod(
            Invocation.method(#timeout, [timeLimit], {#onTimeout: onTimeout}),
            returnValue:
                _i3.ifNotNull(
                  _i3.dummyValueOrNull<T>(
                    this,
                    Invocation.method(#timeout, [timeLimit], {#onTimeout: onTimeout}),
                  ),
                  (T v) => _i2.Future<T>.value(v),
                ) ??
                _FakeFuture_0<T>(
                  this,
                  Invocation.method(#timeout, [timeLimit], {#onTimeout: onTimeout}),
                ),
          )
          as _i2.Future<T>);
}
